name: Docs to PDF

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**/*.md'
      - 'docs/images/**'
  workflow_dispatch:  # allows manual triggering from the Actions tab

permissions:
  contents: write

jobs:
  build:
    name: Build PDFs + QR Codes
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - uses: actions/checkout@v4

      # Debug: show repo state
      - name: Debug - list docs folder
        run: |
          echo "Docs folder content:"
          ls -laR docs || true

      # Clean output folders
      - uses: JesseTG/rm@v1.0.3
        with:
          path: |
            pdfs
            qr-codes

      # Node setup and md-to-pdf
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Convert Markdown to PDFs (with no-sandbox)
        run: |
          npm i -g md-to-pdf@latest
          shopt -s globstar
          mkdir -p pdfs
          for md in docs/**/*.md; do
            echo "Converting: $md"
            md-to-pdf "$md" --launch-options '{"args":["--no-sandbox"]}'
            src_pdf="${md%.md}.pdf"
            if [ -f "$src_pdf" ]; then
              mv "$src_pdf" "pdfs/$(basename "$src_pdf")"
            else
              echo "No PDF produced for $md" >&2
            fi
          done

      # Debug: show generated PDFs
      - name: Debug - list PDFs
        run: |
          echo "PDFs generated:"
          ls -la pdfs || true

      # Python setup for QR generation
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies for QR codes
        run: |
          python -m pip install --upgrade pip
          pip install "qrcode[pil]"
          sudo apt-get update
          sudo apt-get install -y fonts-dejavu-core

      # Generate QR codes with headings
      - name: Generate QR codes with H1 overlay
        env:
          REPOSITORY: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
        run: |
          python - <<'PY'
          import os, pathlib, urllib.parse, re
          import qrcode
          from PIL import Image, ImageDraw, ImageFont

          pdf_dir  = pathlib.Path("pdfs")
          docs_dir = pathlib.Path("docs")
          out_dir  = pathlib.Path("qr-codes")
          out_dir.mkdir(parents=True, exist_ok=True)

          repo   = os.environ["REPOSITORY"]
          branch = os.environ.get("BRANCH", "main")

          # Load a font with Icelandic support
          font = None
          for fp in ("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
                     "/usr/share/fonts/truetype/dejavu/DejaVuSansCondensed.ttf"):
              if pathlib.Path(fp).exists():
                  font = ImageFont.truetype(fp, 28)
                  break
          if font is None:
              font = ImageFont.load_default()

          def get_h1(md_file: pathlib.Path) -> str:
              try:
                  with md_file.open(encoding="utf-8") as f:
                      for line in f:
                          match = re.match(r'^\s*#\s+(.*)', line)
                          if match:
                              return match.group(1).strip()
              except Exception:
                  pass
              return md_file.stem

          for pdf_path in sorted(pdf_dir.glob("*.pdf")):
              base = pdf_path.stem
              candidates = list(docs_dir.rglob(f"{base}.md"))
              heading = get_h1(candidates[0]) if candidates else base

              raw_url = f"https://raw.githubusercontent.com/{repo}/{branch}/pdfs/{urllib.parse.quote(pdf_path.name)}"
              qr = qrcode.QRCode(error_correction=qrcode.constants.ERROR_CORRECT_Q, box_size=10, border=4)
              qr.add_data(raw_url)
              qr.make(fit=True)
              img = qr.make_image(fill_color="black", back_color="white").convert("RGB")

              # Measure heading text and build output image
              draw = ImageDraw.Draw(img)
              try:
                  bbox = draw.textbbox((0,0), heading, font=font)
                  text_w, text_h = bbox[2]-bbox[0], bbox[3]-bbox[1]
              except:
                  text_w, text_h = draw.textsize(heading, font=font)

              padding_top, padding_bottom, margin_side = 6, 12, 16
              new_w = max(img.width, text_w + 2*margin_side)
              new_h = img.height + padding_top + text_h + padding_bottom
              out_img = Image.new("RGB", (new_w, new_h), "white")
              out_img.paste(img, ((new_w - img.width)//2, 0))
              draw = ImageDraw.Draw(out_img)
              draw.text(((new_w - text_w)//2, img.height + padding_top), heading, fill="black", font=font)

              out_path = out_dir / f"{base}.png"
              out_img.save(out_path)
              print(f"Created QR: {out_path} (URL: {raw_url})")
          PY

      # Debug: show QR codes
      - name: Debug - list QR codes
        run: |
          echo "QR codes generated:"
          ls -la qr-codes || true

      # Upload artifacts (optional)
      - uses: actions/upload-artifact@v4
        with:
          name: docs-and-qrs
          path: |
            pdfs
            qr-codes

      # Commit changes
      - uses: EndBug/add-and-commit@v9
        with:
          message: 'Updated PDFs and QR codes'
          add: |
            pdfs/*.pdf --force
            qr-codes/*.png --force
